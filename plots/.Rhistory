library(sdcMicro)
sex <- c("f", "m", "f", "m", "m", "m")
married <- c("y", "n", "n", "y", "y", "n")
nationality <- c("Danish", "German", "US", "Danish", "Danish", "French")
zip <- c(2000, 2200, 2200, 2100, 2300, 2100)
condition <- c("Cancer", "Flu", "Flu", "Heart attack", "Cold", "Flu")
df <- data.frame(sex, married, nationality, zip, condition)
sdc <- createSdcObj(df,
keyVars=c("sex", "married", "nationality", "zip"),
sensibleVar = "condition")
sdc1 <- groupAndRename(sdc, var = "nationality",
before = c("German", "US", "French"),
after = "Non-Danish")
sdc2 <- groupAndRename(sdc, var = "nationality",
before = c("German", "Danish", "French"),
after = "EU")
sdc2 <- groupAndRename(sdc2, var = "nationality",
before = c("US"),
after = "Non-EU")
sdc1 <- kAnon(sdc1,k=2)
sdc2 <- kAnon(sdc2,k=2)
extractManipData(sdc1)
extractManipData(sdc2)
train <- read.csv('train_loss.csv', header=T)
val <- read.csv("val_loss.csv", header=T)
train <- train %>% select(-Wall.time)
val <- val %>% select(-Wall.time)
library(dplyr)
library(ggplot2)
train <- read.csv('train_loss.csv', header=T)
val <- read.csv("val_loss.csv", header=T)
train <- train %>% select(-Wall.time)
val <- val %>% select(-Wall.time)
train <- read.csv('train_loss.csv', header=T)
setwd("~/Documents/School/bsc/plots")
library(dplyr)
library(ggplot2)
train <- read.csv('train_loss.csv', header=T)
val <- read.csv("val_loss.csv", header=T)
train <- train %>% select(-Wall.time)
val <- val %>% select(-Wall.time)
train$Step += 1
train$Step + 1
View(train)
theme_Publication <- function(base_size=14, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = "black", size=1),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
# axis.line = element_line(colour="black"),
axis.line = element_blank(),
axis.ticks = element_line(),
panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(1.3, "cm"),
legend.spacing = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
library(dplyr)
library(ggplot2)
train <- read.csv('train_loss.csv', header=T)
val <- read.csv("val_loss.csv", header=T)
train <- train %>% select(-Wall.time)
val <- val %>% select(-Wall.time)
train$Step <- train$Step + 1
val$Step <- val$Step + 1
train$group = "train"
val$group = "val"
df <- rbind(train, val)
p1 <- ggplot(df, aes(x=Step, Value, group=group, linetype=group)) +
geom_line(size=1) +
theme_Publication() +
theme(legend.title = element_blank()) +
ggtitle("Validation Loss") +
labs(x = "Epochs", y = "Loss") +
scale_linetype_manual(values = c(1, 8), labels = c("Train", "Validation"))
p1
# 3, 8, 1, 4
# require(gridExtra)
# grid.arrange(p1, p2, ncol=2)
theme_Publication <- function(base_size=14, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = "black", size=1),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
# axis.line = element_line(colour="black"),
axis.line = element_blank(),
axis.ticks = element_line(),
panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(1.3, "cm"),
legend.spacing = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
library(dplyr)
library(ggplot2)
train <- read.csv('train_RMSE.csv', header=T)
val <- read.csv("val_RMSE.csv", header=T)
train <- train %>% select(-Wall.time)
val <- val %>% select(-Wall.time)
train$Step <- train$Step + 1
val$Step <- val$Step + 1
train$group = "train"
val$group = "val"
df <- rbind(train, val)
p1 <- ggplot(df, aes(x=Step, Value, group=group, linetype=group)) +
geom_line(size=1) +
theme_Publication() +
theme(legend.title = element_blank()) +
ggtitle("Validation Root Mean Square Error") +
labs(x = "Epochs", y = "RMSE") +
scale_linetype_manual(values = c(1, 8), labels = c("Train", "Validation"))
p1
# 3, 8, 1, 4
# require(gridExtra)
# grid.arrange(p1, p2, ncol=2)
theme_Publication <- function(base_size=14, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = "black", size=1),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
# axis.line = element_line(colour="black"),
axis.line = element_blank(),
axis.ticks = element_line(),
panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(1.3, "cm"),
legend.spacing = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
library(dplyr)
library(ggplot2)
train <- read.csv('train_loss.csv', header=T)
val <- read.csv("val_loss.csv", header=T)
train <- train %>% select(-Wall.time)
val <- val %>% select(-Wall.time)
train$Step <- train$Step + 1
val$Step <- val$Step + 1
train$group = "train"
val$group = "val"
df <- rbind(train, val)
p1 <- ggplot(df, aes(x=Step, Value, group=group, linetype=group)) +
geom_line(size=1) +
theme_Publication() +
theme(legend.title = element_blank()) +
ggtitle("Validation Loss") +
labs(x = "Epochs", y = "Loss") +
scale_linetype_manual(values = c(1, 8), labels = c("Train", "Validation"))
p1
# 3, 8, 1, 4
# require(gridExtra)
# grid.arrange(p1, p2, ncol=2)
theme_Publication <- function(base_size=14, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.3), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = "black", size=1),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
# axis.line = element_line(colour="black"),
axis.line = element_blank(),
axis.ticks = element_line(),
panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(1.3, "cm"),
legend.spacing = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
library(dplyr)
library(ggplot2)
train <- read.csv('train_loss.csv', header=T)
val <- read.csv("val_loss.csv", header=T)
train <- train %>% select(-Wall.time)
val <- val %>% select(-Wall.time)
train$Step <- train$Step + 1
val$Step <- val$Step + 1
train$group = "train"
val$group = "val"
df <- rbind(train, val)
p1 <- ggplot(df, aes(x=Step, Value, group=group, linetype=group)) +
geom_line(size=1) +
theme_Publication() +
theme(legend.title = element_blank()) +
ggtitle("Validation Loss") +
labs(x = "Epochs", y = "Loss") +
scale_linetype_manual(values = c(1, 8), labels = c("Train", "Validation"))
p1
# 3, 8, 1, 4
# require(gridExtra)
# grid.arrange(p1, p2, ncol=2)
theme_Publication <- function(base_size=14, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.3), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = "black", size=1),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
# axis.line = element_line(colour="black"),
axis.line = element_blank(),
axis.ticks = element_line(),
panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(1.5, "cm"),
legend.spacing = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
library(dplyr)
library(ggplot2)
train <- read.csv('train_loss.csv', header=T)
val <- read.csv("val_loss.csv", header=T)
train <- train %>% select(-Wall.time)
val <- val %>% select(-Wall.time)
train$Step <- train$Step + 1
val$Step <- val$Step + 1
train$group = "train"
val$group = "val"
df <- rbind(train, val)
p1 <- ggplot(df, aes(x=Step, Value, group=group, linetype=group)) +
geom_line(size=1) +
theme_Publication() +
theme(legend.title = element_blank()) +
ggtitle("Validation Loss") +
labs(x = "Epochs", y = "Loss") +
scale_linetype_manual(values = c(1, 8), labels = c("Train", "Validation"))
p1
# 3, 8, 1, 4
# require(gridExtra)
# grid.arrange(p1, p2, ncol=2)
theme_Publication <- function(base_size=14, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.3), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = "black", size=1),
axis.title = element_text(face = "bold",size = rel(1.5)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
# axis.line = element_line(colour="black"),
axis.line = element_blank(),
axis.ticks = element_line(),
panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(1.5, "cm"),
legend.spacing = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
library(dplyr)
library(ggplot2)
train <- read.csv('train_loss.csv', header=T)
val <- read.csv("val_loss.csv", header=T)
train <- train %>% select(-Wall.time)
val <- val %>% select(-Wall.time)
train$Step <- train$Step + 1
val$Step <- val$Step + 1
train$group = "train"
val$group = "val"
df <- rbind(train, val)
p1 <- ggplot(df, aes(x=Step, Value, group=group, linetype=group)) +
geom_line(size=1) +
theme_Publication() +
theme(legend.title = element_blank()) +
ggtitle("Validation Loss") +
labs(x = "Epochs", y = "Loss") +
scale_linetype_manual(values = c(1, 8), labels = c("Train", "Validation"))
p1
# 3, 8, 1, 4
# require(gridExtra)
# grid.arrange(p1, p2, ncol=2)
theme_Publication <- function(base_size=14, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.3), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = "black", size=1),
axis.title = element_text(face = "bold",size = rel(1.3)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
# axis.line = element_line(colour="black"),
axis.line = element_blank(),
axis.ticks = element_line(),
panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(1.5, "cm"),
legend.spacing = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
library(dplyr)
library(ggplot2)
train <- read.csv('train_loss.csv', header=T)
val <- read.csv("val_loss.csv", header=T)
train <- train %>% select(-Wall.time)
val <- val %>% select(-Wall.time)
train$Step <- train$Step + 1
val$Step <- val$Step + 1
train$group = "train"
val$group = "val"
df <- rbind(train, val)
p1 <- ggplot(df, aes(x=Step, Value, group=group, linetype=group)) +
geom_line(size=1) +
theme_Publication() +
theme(legend.title = element_blank()) +
ggtitle("Validation Loss") +
labs(x = "Epochs", y = "Loss") +
scale_linetype_manual(values = c(1, 8), labels = c("Train", "Validation"))
p1
# 3, 8, 1, 4
# require(gridExtra)
# grid.arrange(p1, p2, ncol=2)
theme_Publication <- function(base_size=14, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.5), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = "black", size=1),
axis.title = element_text(face = "bold",size = rel(1.3)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
# axis.line = element_line(colour="black"),
axis.line = element_blank(),
axis.ticks = element_line(),
panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(1.5, "cm"),
legend.spacing = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
library(dplyr)
library(ggplot2)
train <- read.csv('train_loss.csv', header=T)
val <- read.csv("val_loss.csv", header=T)
train <- train %>% select(-Wall.time)
val <- val %>% select(-Wall.time)
train$Step <- train$Step + 1
val$Step <- val$Step + 1
train$group = "train"
val$group = "val"
df <- rbind(train, val)
p1 <- ggplot(df, aes(x=Step, Value, group=group, linetype=group)) +
geom_line(size=1) +
theme_Publication() +
theme(legend.title = element_blank()) +
ggtitle("Validation Loss") +
labs(x = "Epochs", y = "Loss") +
scale_linetype_manual(values = c(1, 8), labels = c("Train", "Validation"))
p1
# 3, 8, 1, 4
# require(gridExtra)
# grid.arrange(p1, p2, ncol=2)
theme_Publication <- function(base_size=14, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.5), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = "black", size=1),
axis.title = element_text(face = "bold",size = rel(1.3)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
# axis.line = element_line(colour="black"),
axis.line = element_blank(),
axis.ticks = element_line(),
panel.grid.major = element_line(colour = "gray", linetype = "dashed"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(1.5, "cm"),
legend.spacing = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
library(dplyr)
library(ggplot2)
train <- read.csv('train_RMSE.csv', header=T)
val <- read.csv("val_RMSE.csv", header=T)
train <- train %>% select(-Wall.time)
val <- val %>% select(-Wall.time)
train$Step <- train$Step + 1
val$Step <- val$Step + 1
train$group = "train"
val$group = "val"
df <- rbind(train, val)
p1 <- ggplot(df, aes(x=Step, Value, group=group, linetype=group)) +
geom_line(size=1) +
theme_Publication() +
theme(legend.title = element_blank()) +
ggtitle("Validation Root Mean Square Error") +
labs(x = "Epochs", y = "RMSE") +
scale_linetype_manual(values = c(1, 8), labels = c("Train", "Validation"))
p1
# 3, 8, 1, 4
# require(gridExtra)
# grid.arrange(p1, p2, ncol=2)
